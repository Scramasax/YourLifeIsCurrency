/// Artimech
/// 
/// Copyright Â© <2017> <George A Lancaster>
/// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
/// and associated documentation files (the "Software"), to deal in the Software without restriction, 
/// including without limitation the rights to use, copy, modify, merge, publish, distribute, 
/// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
/// is furnished to do so, subject to the following conditions:
/// The above copyright notice and this permission notice shall be included in all copies 
/// or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
/// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
/// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
/// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
/// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
/// OTHER DEALINGS IN THE SOFTWARE.

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace Artimech
{
    public class aMechSimMgr : stateMachineGame
    {
        public aMechPlayerController m_PlayerController;

        public string m_LevelLoose;
        public string m_WinLevel;

        public GameObject m_LooseText;
        public GameObject m_YouKilledAllText;
        public GameObject m_CollectAllCoinsText;
        public GameObject m_YouWinText;
        public GameObject m_CollectTimeText;

        public float m_KillAllTextTimeLimit = 1.5f;
        public float m_CollectAllCoinsTimeLimit = 10.0f;

        private static aMechSimMgr m_Instance = null;
        /// <summary>Returns an instance of SimMgr </summary>
        public static aMechSimMgr Inst { get { return m_Instance; } }

        public IList<aMechdemonstick> EnemyList { get => m_EnemyList; set => m_EnemyList = value; }

        private IList<aMechdemonstick> m_EnemyList;

        new void Awake()
        {
            m_Instance = GetComponent<aMechSimMgr>();
            m_EnemyList = new List<aMechdemonstick>();
            base.Awake();
            CreateStates();
        }

        // Use this for initialization
        new void Start()
        {
            base.Start();
        }

        // Update is called once per frame
        new void Update()
        {
            base.Update();
        }

        new void FixedUpdate()
        {
            base.FixedUpdate();
        }

        /// <summary>
        /// Autogenerated state are created here inside this function.
        /// </summary>
        void CreateStates()
        {

            m_CurrentState = AddState(new simMgrStart(this.gameObject), "simMgrStart");

            //<ArtiMechStates>
            AddState(new simMgrPlayerWins(this.gameObject),"simMgrPlayerWins");
            AddState(new simMgrCollectAllCoins(this.gameObject),"simMgrCollectAllCoins");
            AddState(new simMgrLoadWinLevel(this.gameObject),"simMgrLoadWinLevel");
            AddState(new simMgrKilledAll(this.gameObject),"simMgrKilledAll");
            AddState(new simMgrLoadSameLevel(this.gameObject),"simMgrLoadSameLevel");
            AddState(new simMgrPlayerDying(this.gameObject),"simMgrPlayerDying");
            AddState(new simMgrUpdate(this.gameObject),"simMgrUpdate");

        }
    }
}