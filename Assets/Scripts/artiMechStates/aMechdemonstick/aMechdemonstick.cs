/// Artimech
/// 
/// Copyright Â© <2017> <George A Lancaster>
/// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
/// and associated documentation files (the "Software"), to deal in the Software without restriction, 
/// including without limitation the rights to use, copy, modify, merge, publish, distribute, 
/// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
/// is furnished to do so, subject to the following conditions:
/// The above copyright notice and this permission notice shall be included in all copies 
/// or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
/// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS 
/// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
/// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
/// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
/// OTHER DEALINGS IN THE SOFTWARE.

using UnityEngine;
using System.Collections;

namespace Artimech
{
    public class aMechdemonstick : stateMachineGame
    {
        public GameObject m_Target;
        public GameObject[] m_PatrolPoints;
        public float m_PatrolDistThresh = 0.25f;
        int m_CurrentPatrolIndex = -1;
        public aMechvisioncone m_VisionCone;
        public float m_SurpiseTime = 1.5f;
        public float m_DieTime = 2.0f;
        public float m_WalkSpeed = 0.4f;
        public float m_RunSpeed = 1.0f;
        public float m_JumpAttackDist = 5.0f;
        public float m_AfterJumpAttackTimeLimit = 3.0f;
        public GameObject m_CoinPrefab;
        public int m_MinCoins = 5;
        public int m_MaxCoins = 10;
        public float m_AttackDamage = 25.0f;
        public float m_AttackDistance = 3.5f;

        public int CurrentPatrolIndex { get => m_CurrentPatrolIndex; set => m_CurrentPatrolIndex = value; }

        new void Awake()
        {
            base.Awake();
            CreateStates();
        }

        // Use this for initialization
        new void Start()
        {
            base.Start();
        }

        // Update is called once per frame
        new void Update()
        {
            base.Update();
        }

        new void FixedUpdate()
        {
            base.FixedUpdate();
        }

        /// <summary>
        /// Autogenerated state are created here inside this function.
        /// </summary>
        void CreateStates()
        {

            m_CurrentState = AddState(new aiDemonStart(this.gameObject), "aiDemonStart");

            //<ArtiMechStates>
            AddState(new aiDemonDead(this.gameObject), "aiDemonDead");
            AddState(new aiDemonDying(this.gameObject), "aiDemonDying");
            AddState(new aiDemonAfterAttack(this.gameObject), "aiDemonAfterAttack");
            AddState(new aiDemonAttack(this.gameObject), "aiDemonAttack");
            AddState(new aiDemonChase(this.gameObject), "aiDemonChase");
            AddState(new aiWaitAtPoint(this.gameObject), "aiWaitAtPoint");
            AddState(new aiSurpise(this.gameObject), "aiSurpise");
            AddState(new aiDemonMoveToNextPatroPoint(this.gameObject), "aiDemonMoveToNextPatroPoint");

        }
    }
}